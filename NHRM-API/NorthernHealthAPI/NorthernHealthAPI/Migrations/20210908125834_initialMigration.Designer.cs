// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NorthernHealthAPI.Models;

namespace NorthernHealthAPI.Migrations
{
    [DbContext(typeof(NHRMDBContext))]
    [Migration("20210908125834_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NorthernHealthAPI.Models.ConditionDetails", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("NextAppointment")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcedureDate")
                        .HasColumnType("datetime");

                    b.HasKey("CategoryId", "Urnumber");

                    b.ToTable("ConditionDetails");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.DataPoint", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<int>("DataPointNumber")
                        .HasColumnType("int");

                    b.Property<int>("LowerLimit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UpperLimit")
                        .HasColumnType("int");

                    b.HasKey("MeasurementId", "DataPointNumber");

                    b.ToTable("DataPoint");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.DataPointRecord", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<int>("DataPointNumber")
                        .HasColumnType("int");

                    b.Property<int>("MeasurementRecordId")
                        .HasColumnName("MeasurementRecordID")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("MeasurementId", "DataPointNumber", "MeasurementRecordId");

                    b.HasIndex("MeasurementRecordId");

                    b.ToTable("DataPointRecord");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("MeasurementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("MeasurementId");

                    b.HasIndex("MeasurementName")
                        .IsUnique()
                        .HasName("UQ_MeasurementName");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.MeasurementRecord", b =>
                {
                    b.Property<int>("MeasurementRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeasurementRecordID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeRecorded")
                        .HasColumnType("datetime");

                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<string>("Urnumber")
                        .IsRequired()
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("MeasurementRecordId");

                    b.HasIndex("MeasurementId", "CategoryId", "Urnumber");

                    b.HasIndex("DateTimeRecorded", "MeasurementId", "CategoryId", "Urnumber")
                        .IsUnique()
                        .HasName("UQ_MeasurementRecord");

                    b.ToTable("MeasurementRecord");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Patient", b =>
                {
                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("HomeNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("LivesAlone")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("binary(64)")
                        .IsFixedLength(true)
                        .HasMaxLength(64);

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RegisteredBy")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Urnumber");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_Email");

                    b.HasIndex("RegisteredBy");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CategoryId", "Urnumber");

                    b.HasIndex("Urnumber");

                    b.ToTable("PatientCategory");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientMeasurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("FrequencySetDate")
                        .HasColumnType("datetime");

                    b.HasKey("MeasurementId", "CategoryId", "Urnumber");

                    b.HasIndex("CategoryId", "Urnumber");

                    b.ToTable("PatientMeasurement");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientRecord", b =>
                {
                    b.Property<DateTime>("DateTimeRecorded")
                        .HasColumnType("datetime");

                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RecordTypeId")
                        .HasColumnName("RecordTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DateTimeRecorded", "Urnumber", "RecordTypeId");

                    b.HasIndex("RecordTypeId");

                    b.HasIndex("Urnumber");

                    b.ToTable("PatientRecord");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientResource", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ResourceId")
                        .HasColumnName("ResourceID")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "Urnumber", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("PatientResource");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.RecordCategory", b =>
                {
                    b.Property<int>("RecordCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RecordCategoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RecordCategoryId");

                    b.HasIndex("Category")
                        .IsUnique()
                        .HasName("UQ_Category");

                    b.ToTable("RecordCategory");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.RecordType", b =>
                {
                    b.Property<int>("RecordTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RecordTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RecordCategoryId")
                        .HasColumnName("RecordCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("RecordType1")
                        .IsRequired()
                        .HasColumnName("RecordType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RecordTypeId");

                    b.HasIndex("RecordCategoryId");

                    b.HasIndex("RecordType1")
                        .IsUnique()
                        .HasName("UQ_RecordType");

                    b.ToTable("RecordType");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ResourceID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(65)")
                        .HasMaxLength(65);

                    b.Property<int>("TypeId")
                        .HasColumnName("TypeID")
                        .HasColumnType("int");

                    b.HasKey("ResourceId");

                    b.HasIndex("TypeId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.ResourceDialog", b =>
                {
                    b.Property<int>("ResourceDialogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ResourceDialogID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("ResourceId")
                        .HasColumnName("ResourceID")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceDialogId");

                    b.HasIndex("ResourceId");

                    b.ToTable("ResourceDialog");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.ResourceType", b =>
                {
                    b.Property<int>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ResourceTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ResourceTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique()
                        .HasName("UQ_ResourceType_TypeName");

                    b.ToTable("ResourceType");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StaffID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("binary(64)")
                        .IsFixedLength(true)
                        .HasMaxLength(64);

                    b.Property<int>("RoleId")
                        .HasColumnName("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StaffId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ_Staff");

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.StaffRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StaffType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.HasIndex("StaffType")
                        .IsUnique()
                        .HasName("UQ_StaffType");

                    b.ToTable("StaffRole");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.SurveyAnswer", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<int>("DataPointNumber")
                        .HasColumnType("int");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("MeasurementId", "DataPointNumber", "AnswerNumber");

                    b.ToTable("SurveyAnswer");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<int>("DataPointNumber")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeasurementId", "DataPointNumber");

                    b.ToTable("SurveyQuestion");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.TemplateCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasName("UQ_CategoryName");

                    b.ToTable("TemplateCategory");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.TemplateMeasurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .HasColumnName("MeasurementID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("MeasurementId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TemplateMeasurement");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.TemplateResource", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnName("ResourceID")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("TemplateResource");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Treating", b =>
                {
                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Urnumber")
                        .HasColumnName("URNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StaffId")
                        .HasColumnName("StaffID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.HasKey("StartDate", "Urnumber", "StaffId");

                    b.HasIndex("StaffId");

                    b.HasIndex("Urnumber");

                    b.ToTable("Treating");
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.ConditionDetails", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.PatientCategory", "PatientCategory")
                        .WithOne("ConditionDetails")
                        .HasForeignKey("NorthernHealthAPI.Models.ConditionDetails", "CategoryId", "Urnumber")
                        .HasConstraintName("FK_ConditionDetails_PatientCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.DataPoint", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.Measurement", "Measurement")
                        .WithMany("DataPoint")
                        .HasForeignKey("MeasurementId")
                        .HasConstraintName("FK_DataPoint_Measurement")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.DataPointRecord", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.MeasurementRecord", "MeasurementRecord")
                        .WithMany("DataPointRecord")
                        .HasForeignKey("MeasurementRecordId")
                        .HasConstraintName("FK_DataPointRecord_MeasurementRecord")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.DataPoint", "DataPoint")
                        .WithMany("DataPointRecord")
                        .HasForeignKey("MeasurementId", "DataPointNumber")
                        .HasConstraintName("FK_DataPointRecord_DataPoint")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.MeasurementRecord", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.PatientMeasurement", "PatientMeasurement")
                        .WithMany("MeasurementRecord")
                        .HasForeignKey("MeasurementId", "CategoryId", "Urnumber")
                        .HasConstraintName("FK_MeasurementRecord_PatientMeasurement")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Patient", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.Staff", "RegisteredByNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("RegisteredBy")
                        .HasConstraintName("FK_Patient_Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientCategory", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.TemplateCategory", "Category")
                        .WithMany("PatientCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PatientCategory_TemplateCategory")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.Patient", "UrnumberNavigation")
                        .WithMany("PatientCategory")
                        .HasForeignKey("Urnumber")
                        .HasConstraintName("FK_PatientCategory_Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientMeasurement", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.Measurement", "Measurement")
                        .WithMany("PatientMeasurement")
                        .HasForeignKey("MeasurementId")
                        .HasConstraintName("FK_PatientMeasurement_Measurement")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.PatientCategory", "PatientCategory")
                        .WithMany("PatientMeasurement")
                        .HasForeignKey("CategoryId", "Urnumber")
                        .HasConstraintName("FK_PatientMeasurement_PatientCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientRecord", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.RecordType", "RecordType")
                        .WithMany("PatientRecord")
                        .HasForeignKey("RecordTypeId")
                        .HasConstraintName("FK_PatientRecord_RecordType")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.Patient", "UrnumberNavigation")
                        .WithMany("PatientRecord")
                        .HasForeignKey("Urnumber")
                        .HasConstraintName("FK_PatientRecord_Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.PatientResource", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.Resource", "Resource")
                        .WithMany("PatientResource")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_PatientResource_Resource")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.PatientCategory", "PatientCategory")
                        .WithMany("PatientResource")
                        .HasForeignKey("CategoryId", "Urnumber")
                        .HasConstraintName("FK_PatientResource_PatientCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.RecordType", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.RecordCategory", "RecordCategory")
                        .WithMany("RecordType")
                        .HasForeignKey("RecordCategoryId")
                        .HasConstraintName("FK_RecordType_RecordCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Resource", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.ResourceType", "Type")
                        .WithMany("Resource")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Resource_ResourceType")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.ResourceDialog", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.Resource", "Resource")
                        .WithMany("ResourceDialog")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_ResourceDialog_Resource")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Staff", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.StaffRole", "Role")
                        .WithMany("Staff")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Staff_StaffRole")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.SurveyAnswer", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyAnswer")
                        .HasForeignKey("MeasurementId", "DataPointNumber")
                        .HasConstraintName("FK_SurveyAnswer_SurveyQuestion")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.SurveyQuestion", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.DataPoint", "DataPoint")
                        .WithOne("SurveyQuestion")
                        .HasForeignKey("NorthernHealthAPI.Models.SurveyQuestion", "MeasurementId", "DataPointNumber")
                        .HasConstraintName("FK_SurveyQuestion_DataPoint")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.TemplateMeasurement", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.TemplateCategory", "Category")
                        .WithMany("TemplateMeasurement")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__TemplateMeasurement_TemplateCategory")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.Measurement", "Measurement")
                        .WithMany("TemplateMeasurement")
                        .HasForeignKey("MeasurementId")
                        .HasConstraintName("FK_TemplateMeasurement_Measurement")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.TemplateResource", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.TemplateCategory", "Category")
                        .WithMany("TemplateResource")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_TemplateResource_TemplateCategory")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.Resource", "Resource")
                        .WithMany("TemplateResource")
                        .HasForeignKey("ResourceId")
                        .HasConstraintName("FK_TemplateResource_Resource")
                        .IsRequired();
                });

            modelBuilder.Entity("NorthernHealthAPI.Models.Treating", b =>
                {
                    b.HasOne("NorthernHealthAPI.Models.Staff", "Staff")
                        .WithMany("Treating")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Treating_Staff")
                        .IsRequired();

                    b.HasOne("NorthernHealthAPI.Models.Patient", "UrnumberNavigation")
                        .WithMany("Treating")
                        .HasForeignKey("Urnumber")
                        .HasConstraintName("FK_Treating_Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
